// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: rpc-twoparty.capnp


#[repr(u16)]
#[deriving(FromPrimitive)]
#[deriving(PartialEq)]
pub enum Side {
  Server = 0,
  Client = 1,
}
impl ::capnp::traits::ToU16 for Side {
  #[inline]
  fn to_u16(self) -> u16 { self as u16 }
}

pub mod vat_id {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_side(&self) -> Option<::rpc_twoparty_capnp::Side> {
      FromPrimitive::from_u16(self.reader.get_data_field::<u16>(0))
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_side(&self) -> Option<::rpc_twoparty_capnp::Side> {
      FromPrimitive::from_u16(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_side(&self, value : ::rpc_twoparty_capnp::Side) {
      self.builder.set_data_field::<u16>(0, value as u16)
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod provision_id {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_join_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_join_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_join_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod recipient_id {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 0, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod third_party_cap_id {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 0, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod join_key_part {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_join_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_part_count(&self) -> u16 {
      self.reader.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn get_part_num(&self) -> u16 {
      self.reader.get_data_field::<u16>(3)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_join_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_join_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_part_count(&self) -> u16 {
      self.builder.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn set_part_count(&self, value : u16) {
      self.builder.set_data_field::<u16>(2, value);
    }
    #[inline]
    pub fn get_part_num(&self) -> u16 {
      self.builder.get_data_field::<u16>(3)
    }
    #[inline]
    pub fn set_part_num(&self, value : u16) {
      self.builder.set_data_field::<u16>(3, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod join_result {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_join_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_succeeded(&self) -> bool {
      self.reader.get_bool_field(32)
    }
    #[inline]
    pub fn get_cap(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
    }
    pub fn has_cap(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_join_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_join_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_succeeded(&self) -> bool {
      self.builder.get_bool_field(32)
    }
    #[inline]
    pub fn set_succeeded(&self, value : bool) {
      self.builder.set_bool_field(32, value);
    }
    #[inline]
    pub fn get_cap(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
    }
    #[inline]
    pub fn init_cap(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_cap(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}
