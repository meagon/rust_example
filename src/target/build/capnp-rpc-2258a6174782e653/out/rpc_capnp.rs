// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: rpc.capnp


pub mod message {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub use self::Which::{Unimplemented,Abort,Call,Return,Finish,Resolve,Release,ObsoleteSave,Bootstrap,ObsoleteDelete,Provide,Accept,Join,Disembargo};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    pub fn has_unimplemented(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_abort(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_call(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_return(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_finish(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_resolve(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_release(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 6 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_obsolete_save(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 7 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_bootstrap(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 8 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_obsolete_delete(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 9 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_provide(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 10 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_accept(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 11 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_join(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 12 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_disembargo(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 13 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichReader<'a>> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          return ::std::option::Some(Unimplemented(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        1 => {
          return ::std::option::Some(Abort(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        2 => {
          return ::std::option::Some(Call(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        3 => {
          return ::std::option::Some(Return(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        4 => {
          return ::std::option::Some(Finish(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        5 => {
          return ::std::option::Some(Resolve(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        6 => {
          return ::std::option::Some(Release(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        7 => {
          return ::std::option::Some(ObsoleteSave(
            ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
          ));
        }
        8 => {
          return ::std::option::Some(Bootstrap(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        9 => {
          return ::std::option::Some(ObsoleteDelete(
            ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
          ));
        }
        10 => {
          return ::std::option::Some(Provide(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        11 => {
          return ::std::option::Some(Accept(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        12 => {
          return ::std::option::Some(Join(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        13 => {
          return ::std::option::Some(Disembargo(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn set_unimplemented(&self, value : ::rpc_capnp::message::Reader) {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_unimplemented(&self, ) -> ::rpc_capnp::message::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::message::STRUCT_SIZE))
    }
    pub fn has_unimplemented(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 0 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_abort(&self, value : ::rpc_capnp::exception::Reader) {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_abort(&self, ) -> ::rpc_capnp::exception::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::exception::STRUCT_SIZE))
    }
    pub fn has_abort(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_call(&self, value : ::rpc_capnp::call::Reader) {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_call(&self, ) -> ::rpc_capnp::call::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::call::STRUCT_SIZE))
    }
    pub fn has_call(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 2 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_return(&self, value : ::rpc_capnp::return_::Reader) {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_return(&self, ) -> ::rpc_capnp::return_::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::return_::STRUCT_SIZE))
    }
    pub fn has_return(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 3 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_finish(&self, value : ::rpc_capnp::finish::Reader) {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_finish(&self, ) -> ::rpc_capnp::finish::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::finish::STRUCT_SIZE))
    }
    pub fn has_finish(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_resolve(&self, value : ::rpc_capnp::resolve::Reader) {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_resolve(&self, ) -> ::rpc_capnp::resolve::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::resolve::STRUCT_SIZE))
    }
    pub fn has_resolve(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 5 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_release(&self, value : ::rpc_capnp::release::Reader) {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_release(&self, ) -> ::rpc_capnp::release::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::release::STRUCT_SIZE))
    }
    pub fn has_release(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 6 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn init_obsolete_save(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 7);
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_obsolete_save(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 7 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_bootstrap(&self, value : ::rpc_capnp::bootstrap::Reader) {
      self.builder.set_data_field::<u16>(0, 8);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_bootstrap(&self, ) -> ::rpc_capnp::bootstrap::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 8);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::bootstrap::STRUCT_SIZE))
    }
    pub fn has_bootstrap(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 8 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn init_obsolete_delete(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 9);
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_obsolete_delete(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 9 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_provide(&self, value : ::rpc_capnp::provide::Reader) {
      self.builder.set_data_field::<u16>(0, 10);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_provide(&self, ) -> ::rpc_capnp::provide::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 10);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::provide::STRUCT_SIZE))
    }
    pub fn has_provide(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 10 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_accept(&self, value : ::rpc_capnp::accept::Reader) {
      self.builder.set_data_field::<u16>(0, 11);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_accept(&self, ) -> ::rpc_capnp::accept::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 11);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::accept::STRUCT_SIZE))
    }
    pub fn has_accept(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 11 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_join(&self, value : ::rpc_capnp::join::Reader) {
      self.builder.set_data_field::<u16>(0, 12);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_join(&self, ) -> ::rpc_capnp::join::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 12);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::join::STRUCT_SIZE))
    }
    pub fn has_join(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 12 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_disembargo(&self, value : ::rpc_capnp::disembargo::Reader) {
      self.builder.set_data_field::<u16>(0, 13);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_disembargo(&self, ) -> ::rpc_capnp::disembargo::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 13);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::disembargo::STRUCT_SIZE))
    }
    pub fn has_disembargo(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 13 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichBuilder<'a>> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          return ::std::option::Some(Unimplemented(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::message::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        1 => {
          return ::std::option::Some(Abort(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::exception::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        2 => {
          return ::std::option::Some(Call(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::call::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        3 => {
          return ::std::option::Some(Return(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::return_::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        4 => {
          return ::std::option::Some(Finish(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::finish::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        5 => {
          return ::std::option::Some(Resolve(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::resolve::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        6 => {
          return ::std::option::Some(Release(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::release::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        7 => {
          return ::std::option::Some(ObsoleteSave(
            ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
          ));
        }
        8 => {
          return ::std::option::Some(Bootstrap(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::bootstrap::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        9 => {
          return ::std::option::Some(ObsoleteDelete(
            ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
          ));
        }
        10 => {
          return ::std::option::Some(Provide(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::provide::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        11 => {
          return ::std::option::Some(Accept(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::accept::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        12 => {
          return ::std::option::Some(Join(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::join::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        13 => {
          return ::std::option::Some(Disembargo(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::disembargo::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  pub enum Which<'a,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13> {
    Unimplemented(A0),
    Abort(A1),
    Call(A2),
    Return(A3),
    Finish(A4),
    Resolve(A5),
    Release(A6),
    ObsoleteSave(A7),
    Bootstrap(A8),
    ObsoleteDelete(A9),
    Provide(A10),
    Accept(A11),
    Join(A12),
    Disembargo(A13),
  }
  pub type WhichReader<'a> = Which<'a,::rpc_capnp::message::Reader<'a>,::rpc_capnp::exception::Reader<'a>,::rpc_capnp::call::Reader<'a>,::rpc_capnp::return_::Reader<'a>,::rpc_capnp::finish::Reader<'a>,::rpc_capnp::resolve::Reader<'a>,::rpc_capnp::release::Reader<'a>,::capnp::any_pointer::Reader<'a>,::rpc_capnp::bootstrap::Reader<'a>,::capnp::any_pointer::Reader<'a>,::rpc_capnp::provide::Reader<'a>,::rpc_capnp::accept::Reader<'a>,::rpc_capnp::join::Reader<'a>,::rpc_capnp::disembargo::Reader<'a>>;
  pub type WhichBuilder<'a> = Which<'a,::rpc_capnp::message::Builder<'a>,::rpc_capnp::exception::Builder<'a>,::rpc_capnp::call::Builder<'a>,::rpc_capnp::return_::Builder<'a>,::rpc_capnp::finish::Builder<'a>,::rpc_capnp::resolve::Builder<'a>,::rpc_capnp::release::Builder<'a>,::capnp::any_pointer::Builder<'a>,::rpc_capnp::bootstrap::Builder<'a>,::capnp::any_pointer::Builder<'a>,::rpc_capnp::provide::Builder<'a>,::rpc_capnp::accept::Builder<'a>,::rpc_capnp::join::Builder<'a>,::rpc_capnp::disembargo::Builder<'a>>;
}

pub mod bootstrap {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_deprecated_object_id(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
    }
    pub fn has_deprecated_object_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_deprecated_object_id(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
    }
    #[inline]
    pub fn init_deprecated_object_id(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_deprecated_object_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod call {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 3, pointers : 3 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
    }
    pub fn has_target(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_interface_id(&self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_method_id(&self) -> u16 {
      self.reader.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn get_params(&self) -> ::rpc_capnp::payload::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(1).get_struct( ::std::ptr::null()))
    }
    pub fn has_params(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_send_results_to(&self) -> ::rpc_capnp::call::send_results_to::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader)
    }
    #[inline]
    pub fn get_allow_third_party_tail_call(&self) -> bool {
      self.reader.get_bool_field(128)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::message_target::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_target(&self, value : ::rpc_capnp::message_target::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_target(&self, ) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::message_target::STRUCT_SIZE))
    }
    pub fn has_target(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_interface_id(&self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_interface_id(&self, value : u64) {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_method_id(&self) -> u16 {
      self.builder.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn set_method_id(&self, value : u16) {
      self.builder.set_data_field::<u16>(2, value);
    }
    #[inline]
    pub fn get_params(&self) -> ::rpc_capnp::payload::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(1).get_struct(::rpc_capnp::payload::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_params(&self, value : ::rpc_capnp::payload::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value)
    }
    #[inline]
    pub fn init_params(&self, ) -> ::rpc_capnp::payload::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(1).init_struct(::rpc_capnp::payload::STRUCT_SIZE))
    }
    pub fn has_params(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_send_results_to(&self) -> ::rpc_capnp::call::send_results_to::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_send_results_to(&self, ) -> ::rpc_capnp::call::send_results_to::Builder<'a> {
      self.builder.set_data_field::<u16>(3, 0);
      self.builder.get_pointer_field(2).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn get_allow_third_party_tail_call(&self) -> bool {
      self.builder.get_bool_field(128)
    }
    #[inline]
    pub fn set_allow_third_party_tail_call(&self, value : bool) {
      self.builder.set_bool_field(128, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_params(&self) -> ::rpc_capnp::payload::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_send_results_to(&self) -> ::rpc_capnp::call::send_results_to::Pipeline {
      FromTypelessPipeline::new(self._typeless.noop())
    }
  }

  pub mod send_results_to {
    #![allow(unused_imports)]
    use capnp::capability::{FromClientHook, FromTypelessPipeline};
    use capnp::{text, data};
    use capnp::layout;
    use capnp::traits::{FromStructBuilder, FromStructReader};
    use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

    pub use self::Which::{Caller,Yourself,ThirdParty};

    pub struct Reader<'a> { reader : layout::StructReader<'a> }

    impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader : reader }
      }
    }

    impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
      }
    }

    impl <'a> Reader<'a> {
      pub fn has_third_party(&self) -> bool {
        if self.reader.get_data_field::<u16>(3) != 2 { return false; }
        !self.reader.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn which(&self) -> ::std::option::Option<WhichReader<'a>> {
        match self.reader.get_data_field::<u16>(3) {
          0 => {
            return ::std::option::Some(Caller(
              ()
            ));
          }
          1 => {
            return ::std::option::Some(Yourself(
              ()
            ));
          }
          2 => {
            return ::std::option::Some(ThirdParty(
              ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(2))
            ));
          }
          _ => return ::std::option::None
        }
      }
    }

    pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
    impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder : builder }
      }
    }

    impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
      fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
    }

    impl <'a> Builder<'a> {
      pub fn as_reader(&self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.as_reader())
      }
      #[inline]
      pub fn set_caller(&self, _value : ()) {
        self.builder.set_data_field::<u16>(3, 0);
      }
      #[inline]
      pub fn set_yourself(&self, _value : ()) {
        self.builder.set_data_field::<u16>(3, 1);
      }
      #[inline]
      pub fn init_third_party(&self, ) -> ::capnp::any_pointer::Builder<'a> {
        self.builder.set_data_field::<u16>(3, 2);
        let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(2));
        result.clear();
        result
      }
      pub fn has_third_party(&self) -> bool {
        if self.builder.get_data_field::<u16>(3) != 2 { return false; }
        !self.builder.get_pointer_field(2).is_null()
      }
      #[inline]
      pub fn which(&self) -> ::std::option::Option<WhichBuilder<'a>> {
        match self.builder.get_data_field::<u16>(3) {
          0 => {
            return ::std::option::Some(Caller(
              ()
            ));
          }
          1 => {
            return ::std::option::Some(Yourself(
              ()
            ));
          }
          2 => {
            return ::std::option::Some(ThirdParty(
              ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(2))
            ));
          }
          _ => return ::std::option::None
        }
      }
    }

    pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
    impl FromTypelessPipeline for Pipeline {
      fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless : typeless }
      }
    }
    impl Pipeline {
    }
    pub enum Which<'a,A0> {
      Caller(()),
      Yourself(()),
      ThirdParty(A0),
    }
    pub type WhichReader<'a> = Which<'a,::capnp::any_pointer::Reader<'a>>;
    pub type WhichBuilder<'a> = Which<'a,::capnp::any_pointer::Builder<'a>>;
  }
}

pub mod return_ {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub use self::Which::{Results,Exception,Canceled,ResultsSentElsewhere,TakeFromOtherQuestion,AcceptFromThirdParty};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 2, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_answer_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_release_param_caps(&self) -> bool {
      self.reader.get_bool_field_mask(32, true)
    }
    pub fn has_results(&self) -> bool {
      if self.reader.get_data_field::<u16>(3) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_exception(&self) -> bool {
      if self.reader.get_data_field::<u16>(3) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_accept_from_third_party(&self) -> bool {
      if self.reader.get_data_field::<u16>(3) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichReader<'a>> {
      match self.reader.get_data_field::<u16>(3) {
        0 => {
          return ::std::option::Some(Results(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        1 => {
          return ::std::option::Some(Exception(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        2 => {
          return ::std::option::Some(Canceled(
            ()
          ));
        }
        3 => {
          return ::std::option::Some(ResultsSentElsewhere(
            ()
          ));
        }
        4 => {
          return ::std::option::Some(TakeFromOtherQuestion(
            self.reader.get_data_field::<u32>(2)
          ));
        }
        5 => {
          return ::std::option::Some(AcceptFromThirdParty(
            ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_answer_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_answer_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_release_param_caps(&self) -> bool {
      self.builder.get_bool_field_mask(32, true)
    }
    #[inline]
    pub fn set_release_param_caps(&self, value : bool) {
      self.builder.set_bool_field_mask(32, value, true);
    }
    #[inline]
    pub fn set_results(&self, value : ::rpc_capnp::payload::Reader) {
      self.builder.set_data_field::<u16>(3, 0);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_results(&self, ) -> ::rpc_capnp::payload::Builder<'a> {
      self.builder.set_data_field::<u16>(3, 0);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::payload::STRUCT_SIZE))
    }
    pub fn has_results(&self) -> bool {
      if self.builder.get_data_field::<u16>(3) != 0 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_exception(&self, value : ::rpc_capnp::exception::Reader) {
      self.builder.set_data_field::<u16>(3, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_exception(&self, ) -> ::rpc_capnp::exception::Builder<'a> {
      self.builder.set_data_field::<u16>(3, 1);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::exception::STRUCT_SIZE))
    }
    pub fn has_exception(&self) -> bool {
      if self.builder.get_data_field::<u16>(3) != 1 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_canceled(&self, _value : ()) {
      self.builder.set_data_field::<u16>(3, 2);
    }
    #[inline]
    pub fn set_results_sent_elsewhere(&self, _value : ()) {
      self.builder.set_data_field::<u16>(3, 3);
    }
    #[inline]
    pub fn set_take_from_other_question(&self, value : u32) {
      self.builder.set_data_field::<u16>(3, 4);
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn init_accept_from_third_party(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      self.builder.set_data_field::<u16>(3, 5);
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_accept_from_third_party(&self) -> bool {
      if self.builder.get_data_field::<u16>(3) != 5 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichBuilder<'a>> {
      match self.builder.get_data_field::<u16>(3) {
        0 => {
          return ::std::option::Some(Results(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::payload::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        1 => {
          return ::std::option::Some(Exception(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::exception::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        2 => {
          return ::std::option::Some(Canceled(
            ()
          ));
        }
        3 => {
          return ::std::option::Some(ResultsSentElsewhere(
            ()
          ));
        }
        4 => {
          return ::std::option::Some(TakeFromOtherQuestion(
            self.builder.get_data_field::<u32>(2)
          ));
        }
        5 => {
          return ::std::option::Some(AcceptFromThirdParty(
            ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  pub enum Which<'a,A0,A1,A2> {
    Results(A0),
    Exception(A1),
    Canceled(()),
    ResultsSentElsewhere(()),
    TakeFromOtherQuestion(u32),
    AcceptFromThirdParty(A2),
  }
  pub type WhichReader<'a> = Which<'a,::rpc_capnp::payload::Reader<'a>,::rpc_capnp::exception::Reader<'a>,::capnp::any_pointer::Reader<'a>>;
  pub type WhichBuilder<'a> = Which<'a,::rpc_capnp::payload::Builder<'a>,::rpc_capnp::exception::Builder<'a>,::capnp::any_pointer::Builder<'a>>;
}

pub mod finish {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_release_result_caps(&self) -> bool {
      self.reader.get_bool_field_mask(32, true)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_release_result_caps(&self) -> bool {
      self.builder.get_bool_field_mask(32, true)
    }
    #[inline]
    pub fn set_release_result_caps(&self, value : bool) {
      self.builder.set_bool_field_mask(32, value, true);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod resolve {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub use self::Which::{Cap,Exception};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_promise_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    pub fn has_cap(&self) -> bool {
      if self.reader.get_data_field::<u16>(2) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_exception(&self) -> bool {
      if self.reader.get_data_field::<u16>(2) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichReader<'a>> {
      match self.reader.get_data_field::<u16>(2) {
        0 => {
          return ::std::option::Some(Cap(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        1 => {
          return ::std::option::Some(Exception(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_promise_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_promise_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn set_cap(&self, value : ::rpc_capnp::cap_descriptor::Reader) {
      self.builder.set_data_field::<u16>(2, 0);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_cap(&self, ) -> ::rpc_capnp::cap_descriptor::Builder<'a> {
      self.builder.set_data_field::<u16>(2, 0);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::cap_descriptor::STRUCT_SIZE))
    }
    pub fn has_cap(&self) -> bool {
      if self.builder.get_data_field::<u16>(2) != 0 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_exception(&self, value : ::rpc_capnp::exception::Reader) {
      self.builder.set_data_field::<u16>(2, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_exception(&self, ) -> ::rpc_capnp::exception::Builder<'a> {
      self.builder.set_data_field::<u16>(2, 1);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::exception::STRUCT_SIZE))
    }
    pub fn has_exception(&self) -> bool {
      if self.builder.get_data_field::<u16>(2) != 1 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichBuilder<'a>> {
      match self.builder.get_data_field::<u16>(2) {
        0 => {
          return ::std::option::Some(Cap(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::cap_descriptor::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        1 => {
          return ::std::option::Some(Exception(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::exception::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  pub enum Which<'a,A0,A1> {
    Cap(A0),
    Exception(A1),
  }
  pub type WhichReader<'a> = Which<'a,::rpc_capnp::cap_descriptor::Reader<'a>,::rpc_capnp::exception::Reader<'a>>;
  pub type WhichBuilder<'a> = Which<'a,::rpc_capnp::cap_descriptor::Builder<'a>,::rpc_capnp::exception::Builder<'a>>;
}

pub mod release {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 0 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_reference_count(&self) -> u32 {
      self.reader.get_data_field::<u32>(1)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_reference_count(&self) -> u32 {
      self.builder.get_data_field::<u32>(1)
    }
    #[inline]
    pub fn set_reference_count(&self, value : u32) {
      self.builder.set_data_field::<u32>(1, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod disembargo {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
    }
    pub fn has_target(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_context(&self) -> ::rpc_capnp::disembargo::context::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::message_target::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_target(&self, value : ::rpc_capnp::message_target::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_target(&self, ) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::message_target::STRUCT_SIZE))
    }
    pub fn has_target(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_context(&self) -> ::rpc_capnp::disembargo::context::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_context(&self, ) -> ::rpc_capnp::disembargo::context::Builder<'a> {
      self.builder.set_data_field::<u16>(2, 0);
      self.builder.set_data_field::<u32>(0, 0u8 as u32);
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_context(&self) -> ::rpc_capnp::disembargo::context::Pipeline {
      FromTypelessPipeline::new(self._typeless.noop())
    }
  }

  pub mod context {
    #![allow(unused_imports)]
    use capnp::capability::{FromClientHook, FromTypelessPipeline};
    use capnp::{text, data};
    use capnp::layout;
    use capnp::traits::{FromStructBuilder, FromStructReader};
    use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

    pub use self::Which::{SenderLoopback,ReceiverLoopback,Accept,Provide};

    pub struct Reader<'a> { reader : layout::StructReader<'a> }

    impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader : reader }
      }
    }

    impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
      }
    }

    impl <'a> Reader<'a> {
      #[inline]
      pub fn which(&self) -> ::std::option::Option<WhichReader> {
        match self.reader.get_data_field::<u16>(2) {
          0 => {
            return ::std::option::Some(SenderLoopback(
              self.reader.get_data_field::<u32>(0)
            ));
          }
          1 => {
            return ::std::option::Some(ReceiverLoopback(
              self.reader.get_data_field::<u32>(0)
            ));
          }
          2 => {
            return ::std::option::Some(Accept(
              ()
            ));
          }
          3 => {
            return ::std::option::Some(Provide(
              self.reader.get_data_field::<u32>(0)
            ));
          }
          _ => return ::std::option::None
        }
      }
    }

    pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
    impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder : builder }
      }
    }

    impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
      fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
    }

    impl <'a> Builder<'a> {
      pub fn as_reader(&self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.as_reader())
      }
      #[inline]
      pub fn set_sender_loopback(&self, value : u32) {
        self.builder.set_data_field::<u16>(2, 0);
        self.builder.set_data_field::<u32>(0, value);
      }
      #[inline]
      pub fn set_receiver_loopback(&self, value : u32) {
        self.builder.set_data_field::<u16>(2, 1);
        self.builder.set_data_field::<u32>(0, value);
      }
      #[inline]
      pub fn set_accept(&self, _value : ()) {
        self.builder.set_data_field::<u16>(2, 2);
      }
      #[inline]
      pub fn set_provide(&self, value : u32) {
        self.builder.set_data_field::<u16>(2, 3);
        self.builder.set_data_field::<u32>(0, value);
      }
      #[inline]
      pub fn which(&self) -> ::std::option::Option<WhichBuilder> {
        match self.builder.get_data_field::<u16>(2) {
          0 => {
            return ::std::option::Some(SenderLoopback(
              self.builder.get_data_field::<u32>(0)
            ));
          }
          1 => {
            return ::std::option::Some(ReceiverLoopback(
              self.builder.get_data_field::<u32>(0)
            ));
          }
          2 => {
            return ::std::option::Some(Accept(
              ()
            ));
          }
          3 => {
            return ::std::option::Some(Provide(
              self.builder.get_data_field::<u32>(0)
            ));
          }
          _ => return ::std::option::None
        }
      }
    }

    pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
    impl FromTypelessPipeline for Pipeline {
      fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless : typeless }
      }
    }
    impl Pipeline {
    }
    pub enum Which {
      SenderLoopback(u32),
      ReceiverLoopback(u32),
      Accept(()),
      Provide(u32),
    }
    pub type WhichReader = Which;
    pub type WhichBuilder = Which;
  }
}

pub mod provide {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 2 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
    }
    pub fn has_target(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_recipient(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(1))
    }
    pub fn has_recipient(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::message_target::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_target(&self, value : ::rpc_capnp::message_target::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_target(&self, ) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::message_target::STRUCT_SIZE))
    }
    pub fn has_target(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_recipient(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1))
    }
    #[inline]
    pub fn init_recipient(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1));
      result.clear();
      result
    }
    pub fn has_recipient(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
}

pub mod accept {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_provision(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
    }
    pub fn has_provision(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_embargo(&self) -> bool {
      self.reader.get_bool_field(32)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_provision(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
    }
    #[inline]
    pub fn init_provision(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_provision(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_embargo(&self) -> bool {
      self.builder.get_bool_field(32)
    }
    #[inline]
    pub fn set_embargo(&self, value : bool) {
      self.builder.set_bool_field(32, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod join {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 2 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
    }
    pub fn has_target(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_key_part(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(1))
    }
    pub fn has_key_part(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::message_target::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_target(&self, value : ::rpc_capnp::message_target::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_target(&self, ) -> ::rpc_capnp::message_target::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::message_target::STRUCT_SIZE))
    }
    pub fn has_target(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_key_part(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1))
    }
    #[inline]
    pub fn init_key_part(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1));
      result.clear();
      result
    }
    pub fn has_key_part(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
    pub fn get_target(&self) -> ::rpc_capnp::message_target::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
  }
}

pub mod message_target {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub use self::Which::{ImportedCap,PromisedAnswer};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    pub fn has_promised_answer(&self) -> bool {
      if self.reader.get_data_field::<u16>(2) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichReader<'a>> {
      match self.reader.get_data_field::<u16>(2) {
        0 => {
          return ::std::option::Some(ImportedCap(
            self.reader.get_data_field::<u32>(0)
          ));
        }
        1 => {
          return ::std::option::Some(PromisedAnswer(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn set_imported_cap(&self, value : u32) {
      self.builder.set_data_field::<u16>(2, 0);
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn set_promised_answer(&self, value : ::rpc_capnp::promised_answer::Reader) {
      self.builder.set_data_field::<u16>(2, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_promised_answer(&self, ) -> ::rpc_capnp::promised_answer::Builder<'a> {
      self.builder.set_data_field::<u16>(2, 1);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::promised_answer::STRUCT_SIZE))
    }
    pub fn has_promised_answer(&self) -> bool {
      if self.builder.get_data_field::<u16>(2) != 1 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichBuilder<'a>> {
      match self.builder.get_data_field::<u16>(2) {
        0 => {
          return ::std::option::Some(ImportedCap(
            self.builder.get_data_field::<u32>(0)
          ));
        }
        1 => {
          return ::std::option::Some(PromisedAnswer(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::promised_answer::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  pub enum Which<'a,A0> {
    ImportedCap(u32),
    PromisedAnswer(A0),
  }
  pub type WhichReader<'a> = Which<'a,::rpc_capnp::promised_answer::Reader<'a>>;
  pub type WhichBuilder<'a> = Which<'a,::rpc_capnp::promised_answer::Builder<'a>>;
}

pub mod payload {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 0, pointers : 2 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_content(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
    }
    pub fn has_content(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_cap_table(&self) -> struct_list::Reader<'a,::rpc_capnp::cap_descriptor::Reader<'a>> {
      struct_list::Reader::new(self.reader.get_pointer_field(1).get_list(layout::InlineComposite, ::std::ptr::null()))
    }
    pub fn has_cap_table(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_content(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
    }
    #[inline]
    pub fn init_content(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_content(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_cap_table(&self) -> struct_list::Builder<'a,::rpc_capnp::cap_descriptor::Builder<'a>> {
      struct_list::Builder::new(self.builder.get_pointer_field(1).get_struct_list(::rpc_capnp::cap_descriptor::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_cap_table(&self, value : struct_list::Reader<'a,::rpc_capnp::cap_descriptor::Reader<'a>>) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value)
    }
    #[inline]
    pub fn init_cap_table(&self, size : u32) -> struct_list::Builder<'a,::rpc_capnp::cap_descriptor::Builder<'a>> {
      struct_list::Builder::<'a, ::rpc_capnp::cap_descriptor::Builder<'a>>::new(
        self.builder.get_pointer_field(1).init_struct_list(size, ::rpc_capnp::cap_descriptor::STRUCT_SIZE))
    }
    pub fn has_cap_table(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod cap_descriptor {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub use self::Which::{None,SenderHosted,SenderPromise,ReceiverHosted,ReceiverAnswer,ThirdPartyHosted};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    pub fn has_receiver_answer(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_third_party_hosted(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichReader<'a>> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          return ::std::option::Some(None(
            ()
          ));
        }
        1 => {
          return ::std::option::Some(SenderHosted(
            self.reader.get_data_field::<u32>(1)
          ));
        }
        2 => {
          return ::std::option::Some(SenderPromise(
            self.reader.get_data_field::<u32>(1)
          ));
        }
        3 => {
          return ::std::option::Some(ReceiverHosted(
            self.reader.get_data_field::<u32>(1)
          ));
        }
        4 => {
          return ::std::option::Some(ReceiverAnswer(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        5 => {
          return ::std::option::Some(ThirdPartyHosted(
            ::capnp::traits::FromStructReader::new(self.reader.get_pointer_field(0).get_struct( ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn set_none(&self, _value : ()) {
      self.builder.set_data_field::<u16>(0, 0);
    }
    #[inline]
    pub fn set_sender_hosted(&self, value : u32) {
      self.builder.set_data_field::<u16>(0, 1);
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn set_sender_promise(&self, value : u32) {
      self.builder.set_data_field::<u16>(0, 2);
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn set_receiver_hosted(&self, value : u32) {
      self.builder.set_data_field::<u16>(0, 3);
      self.builder.set_data_field::<u32>(1, value);
    }
    #[inline]
    pub fn set_receiver_answer(&self, value : ::rpc_capnp::promised_answer::Reader) {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_receiver_answer(&self, ) -> ::rpc_capnp::promised_answer::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::promised_answer::STRUCT_SIZE))
    }
    pub fn has_receiver_answer(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_third_party_hosted(&self, value : ::rpc_capnp::third_party_cap_descriptor::Reader) {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_third_party_hosted(&self, ) -> ::rpc_capnp::third_party_cap_descriptor::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).init_struct(::rpc_capnp::third_party_cap_descriptor::STRUCT_SIZE))
    }
    pub fn has_third_party_hosted(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 5 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(&self) -> ::std::option::Option<WhichBuilder<'a>> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          return ::std::option::Some(None(
            ()
          ));
        }
        1 => {
          return ::std::option::Some(SenderHosted(
            self.builder.get_data_field::<u32>(1)
          ));
        }
        2 => {
          return ::std::option::Some(SenderPromise(
            self.builder.get_data_field::<u32>(1)
          ));
        }
        3 => {
          return ::std::option::Some(ReceiverHosted(
            self.builder.get_data_field::<u32>(1)
          ));
        }
        4 => {
          return ::std::option::Some(ReceiverAnswer(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::promised_answer::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        5 => {
          return ::std::option::Some(ThirdPartyHosted(
            ::capnp::traits::FromStructBuilder::new(self.builder.get_pointer_field(0).get_struct(::rpc_capnp::third_party_cap_descriptor::STRUCT_SIZE, ::std::ptr::null()))
          ));
        }
        _ => return ::std::option::None
      }
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  pub enum Which<'a,A0,A1> {
    None(()),
    SenderHosted(u32),
    SenderPromise(u32),
    ReceiverHosted(u32),
    ReceiverAnswer(A0),
    ThirdPartyHosted(A1),
  }
  pub type WhichReader<'a> = Which<'a,::rpc_capnp::promised_answer::Reader<'a>,::rpc_capnp::third_party_cap_descriptor::Reader<'a>>;
  pub type WhichBuilder<'a> = Which<'a,::rpc_capnp::promised_answer::Builder<'a>,::rpc_capnp::third_party_cap_descriptor::Builder<'a>>;
}

pub mod promised_answer {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn get_transform(&self) -> struct_list::Reader<'a,::rpc_capnp::promised_answer::op::Reader<'a>> {
      struct_list::Reader::new(self.reader.get_pointer_field(0).get_list(layout::InlineComposite, ::std::ptr::null()))
    }
    pub fn has_transform(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_question_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_question_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
    #[inline]
    pub fn get_transform(&self) -> struct_list::Builder<'a,::rpc_capnp::promised_answer::op::Builder<'a>> {
      struct_list::Builder::new(self.builder.get_pointer_field(0).get_struct_list(::rpc_capnp::promised_answer::op::STRUCT_SIZE, ::std::ptr::null()))
    }
    #[inline]
    pub fn set_transform(&self, value : struct_list::Reader<'a,::rpc_capnp::promised_answer::op::Reader<'a>>) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_transform(&self, size : u32) -> struct_list::Builder<'a,::rpc_capnp::promised_answer::op::Builder<'a>> {
      struct_list::Builder::<'a, ::rpc_capnp::promised_answer::op::Builder<'a>>::new(
        self.builder.get_pointer_field(0).init_struct_list(size, ::rpc_capnp::promised_answer::op::STRUCT_SIZE))
    }
    pub fn has_transform(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }

  pub mod op {
    #![allow(unused_imports)]
    use capnp::capability::{FromClientHook, FromTypelessPipeline};
    use capnp::{text, data};
    use capnp::layout;
    use capnp::traits::{FromStructBuilder, FromStructReader};
    use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

    pub use self::Which::{Noop,GetPointerField};

    pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 0 };

    pub struct Reader<'a> { reader : layout::StructReader<'a> }

    impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader : reader }
      }
    }

    impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
      }
    }

    impl <'a> Reader<'a> {
      #[inline]
      pub fn which(&self) -> ::std::option::Option<WhichReader> {
        match self.reader.get_data_field::<u16>(0) {
          0 => {
            return ::std::option::Some(Noop(
              ()
            ));
          }
          1 => {
            return ::std::option::Some(GetPointerField(
              self.reader.get_data_field::<u16>(1)
            ));
          }
          _ => return ::std::option::None
        }
      }
    }

    pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
    impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
    }
    impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder : builder }
      }
    }

    impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
      }
      fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
      }
    }

    impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
      fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
    }

    impl <'a> Builder<'a> {
      pub fn as_reader(&self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.as_reader())
      }
      #[inline]
      pub fn set_noop(&self, _value : ()) {
        self.builder.set_data_field::<u16>(0, 0);
      }
      #[inline]
      pub fn set_get_pointer_field(&self, value : u16) {
        self.builder.set_data_field::<u16>(0, 1);
        self.builder.set_data_field::<u16>(1, value);
      }
      #[inline]
      pub fn which(&self) -> ::std::option::Option<WhichBuilder> {
        match self.builder.get_data_field::<u16>(0) {
          0 => {
            return ::std::option::Some(Noop(
              ()
            ));
          }
          1 => {
            return ::std::option::Some(GetPointerField(
              self.builder.get_data_field::<u16>(1)
            ));
          }
          _ => return ::std::option::None
        }
      }
    }

    pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
    impl FromTypelessPipeline for Pipeline {
      fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless : typeless }
      }
    }
    impl Pipeline {
    }
    pub enum Which {
      Noop(()),
      GetPointerField(u16),
    }
    pub type WhichReader = Which;
    pub type WhichBuilder = Which;
  }
}

pub mod third_party_cap_descriptor {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_id(&self) -> ::capnp::any_pointer::Reader<'a> {
      ::capnp::any_pointer::Reader::new(self.reader.get_pointer_field(0))
    }
    pub fn has_id(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_vine_id(&self) -> u32 {
      self.reader.get_data_field::<u32>(0)
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_id(&self) -> ::capnp::any_pointer::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0))
    }
    #[inline]
    pub fn init_id(&self, ) -> ::capnp::any_pointer::Builder<'a> {
      let result = ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0));
      result.clear();
      result
    }
    pub fn has_id(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_vine_id(&self) -> u32 {
      self.builder.get_data_field::<u32>(0)
    }
    #[inline]
    pub fn set_vine_id(&self, value : u32) {
      self.builder.set_data_field::<u32>(0, value);
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
}

pub mod exception {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 1 };

  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a> Reader<'a> {
    #[inline]
    pub fn get_reason(&self) -> text::Reader<'a> {
      self.reader.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    pub fn has_reason(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_obsolete_is_callers_fault(&self) -> bool {
      self.reader.get_bool_field(0)
    }
    #[inline]
    pub fn get_obsolete_durability(&self) -> u16 {
      self.reader.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn get_type(&self) -> Option<::rpc_capnp::exception::Type> {
      FromPrimitive::from_u16(self.reader.get_data_field::<u16>(2))
    }
  }

  pub struct Builder<'a> { builder : ::capnp::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(&self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    #[inline]
    pub fn get_reason(&self) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_reason(&self, value : text::Reader) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_reason(&self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_reason(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_obsolete_is_callers_fault(&self) -> bool {
      self.builder.get_bool_field(0)
    }
    #[inline]
    pub fn set_obsolete_is_callers_fault(&self, value : bool) {
      self.builder.set_bool_field(0, value);
    }
    #[inline]
    pub fn get_obsolete_durability(&self) -> u16 {
      self.builder.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn set_obsolete_durability(&self, value : u16) {
      self.builder.set_data_field::<u16>(1, value);
    }
    #[inline]
    pub fn get_type(&self) -> Option<::rpc_capnp::exception::Type> {
      FromPrimitive::from_u16(self.builder.get_data_field::<u16>(2))
    }
    #[inline]
    pub fn set_type(&self, value : ::rpc_capnp::exception::Type) {
      self.builder.set_data_field::<u16>(2, value as u16)
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }

  #[repr(u16)]
  #[deriving(FromPrimitive)]
  #[deriving(PartialEq)]
  pub enum Type {
    Failed = 0,
    Overloaded = 1,
    Disconnected = 2,
    Unimplemented = 3,
  }
  impl ::capnp::traits::ToU16 for Type {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
}
